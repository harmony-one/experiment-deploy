---
- hosts: "{{ inventory }}"
  serial: "{{ stride | default(1) }}"
  gather_facts: yes
  vars:
    skip_consensus_check_var: "{{ skip_consensus_check | default('true') }}"

  tasks:
  - name: gather OS specific variables
    include_vars: "{{ item }}"
    with_first_found:
      - '{{ ansible_bios_version }}-{{ ansible_distribution }}.yml'
      - '{{ cloud_platform }}-{{ ansible_distribution }}.yml'
    tags:
      - vars

  - name: restart node
    become: true
    become_user: root
    systemd:
      name: harmony
      state: restarted

  - name: "check pid, BINGO/HOORAY"
    block:
      - name: "get role of the node"
        shell: "curl -s --request POST 'http://127.0.0.1:9500/' --header 'Content-Type: application/json' --data-raw '{ \"jsonrpc\": \"2.0\", \"method\": \"hmyv2_getNodeMetadata\", \"params\": [], \"id\": 1}' | jq -r '.result.role'"
        register: nodeRole

      - debug:
          var: nodeRole.stdout

      - name: get pid
        shell: "pgrep harmony"
        register: pid_of_harmony

      - name: "get line of current log files"
        shell:
        args:
          cmd: "wc -l zerolog-validator-{{ ansible_host }}-9000.log | cut -f1 -d' '"
          chdir: "{{ USER.home }}/latest"
        register: nLines

      - name: "find the start time of the harmony process"
        shell: "systemctl status harmony | grep -oE 'since.*;' | sed 's/^since //'"
        register: startTime

      - name: print out pid and startTime
        debug:
          msg: "PID of hamrony: {{pid_of_harmony.stdout}}, start time: {{startTime.stdout}}, line of logs: {{nLines.stdout}}"

      - name: "check on the first BINGO/HOORAY every 30 sec for 10 minutes on validator"
        shell:
        args:
          cmd: "tail -n +{{ nLines.stdout}} zerolog-validator-{{ ansible_host }}-9000.log | grep -m 1 -E 'HOORAY|BINGO' | jq -r .time"
          chdir: "{{ USER.home }}/latest"
        register: firstConsensus
        until: firstConsensus.stdout.find("T") != -1
        retries: 20
        delay: 30
        when: nodeRole.stdout == 'Validator'

    when: skip_consensus_check_var == 'false'
