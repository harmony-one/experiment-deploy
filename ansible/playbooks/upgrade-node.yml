---
- hosts: '{{ inventory }}'
  serial: "{{ stride | default(5) }}"
  gather_facts: yes
  vars:
    force_update_var: "{{ force_update | default('false') }}"
    skip_consensus_check_var: "{{ skip_consensus_check | default('false') }}"

  tasks:
  - name: gather OS specific variables
    include_vars: "{{ item }}"
    with_first_found:
      - '{{ ansible_bios_version }}-{{ ansible_distribution }}.yml'
      - '{{ cloud_platform }}-{{ ansible_distribution }}.yml'
    tags:
      - vars

  - name: get original harmony version
    shell: "{{ USER.home }}/node.sh -V 2>&1 | grep -oE 'v[0-9]+-v[0-9.]+-[0-9]+-g[a-z0-9]+'"
    register: oVer

  - debug:
      var: oVer.stdout

  - name: "download upgrade binary"
    shell: "{{ USER.home }}/node.sh -U {{ upgrade }} -d"

  - name: get new harmony version
    shell:
    args:
      cmd: "./node.sh -V 2>&1 | grep -oE 'v[0-9]+-v[0-9.]+-[0-9]+-g[a-z0-9]+'"
      chdir: "{{ USER.home }}/staging"
    register: nVer

  - debug:
      var: nVer.stdout

  - name: "get is-leader"
    shell: "curl -s --request POST 'http://127.0.0.1:9500/' --header 'Content-Type: application/json' --data-raw '{ \"jsonrpc\": \"2.0\", \"method\": \"hmyv2_getNodeMetadata\", \"params\": [], \"id\": 1}' | jq -r '.result[\"is-leader\"]'"
    register: isLeader

  - debug:
      var: isLeader.stdout

  - name: "stop, upgrade, restart harmony service"
    block:
      - name: "get role of the node"
        shell: "curl -s --request POST 'http://127.0.0.1:9500/' --header 'Content-Type: application/json' --data-raw '{ \"jsonrpc\": \"2.0\", \"method\": \"hmyv2_getNodeMetadata\", \"params\": [], \"id\": 1}' | jq -r '.result.role'"
        register: nodeRole

      - debug:
          var: nodeRole.stdout

      - name: "stop harmony service"
        become: true
        become_user: root
        systemd:
          name: harmony
          state: stopped

      - name: "get line of current log files"
        shell:
        args:
          cmd: "wc -l zerolog-validator-{{ ansible_host }}-9000.log | cut -f1 -d' '"
          chdir: "{{ USER.home }}/latest"
        register: nLines

      - debug:
          var: nLines.stdout

      - name: "update harmony binary"
        shell: "cp -f {{ USER.home }}/staging/{{ item }} {{ USER.home }}"
        with_items:
          - harmony
          - node.sh

      - name: "restart harmony service"
        become: true
        become_user: root
        systemd:
          name: harmony
          state: started

      - name: upgraded harmony version
        shell: "{{ USER.home }}/node.sh -V 2>&1 | grep -oE 'v[0-9]+-v[0-9.]+-[0-9]+-g[a-z0-9]+'"
        register: tVer

      - debug:
          var: tVer.stdout

      - name: "find the start time of the harmony process"
        shell: "systemctl status harmony | grep -oE 'since.*;' | sed 's/^since //'"
        register: startTime

      - debug:
          var: startTime.stdout

      - name: "check on the first BINGO/HOORAY every 30 sec for 10 minutes on validator"
        shell:
        args:
          cmd: "tail -n +{{ nLines.stdout}} zerolog-validator-{{ ansible_host }}-9000.log | grep -m 1 -E 'HOORAY|BINGO' | jq -r .time"
          chdir: "{{ USER.home }}/latest"
        register: firstConsensus
        until: firstConsensus.stdout.find("T") != -1
        retries: 20
        delay: 30
        when: nodeRole.stdout == 'Validator' and skip_consensus_check_var == 'false'

      - debug:
          var: firstConsensus.stdout
        when: nodeRole.stdout == 'Validator' and skip_consensus_check_var == 'false'

    rescue:
      - name: "restart harmony service" 
        become: true
        become_user: root
        systemd:
          name: harmony
          state: started

    when: ( oVer.stdout != nVer.stdout and isLeader.stdout == 'false' ) or force_update_var == 'true'

  - debug:
      msg: "skipping same version upgrade unless force_update=true"
    when: oVer.stdout == nVer.stdout

  - debug:
      msg: "skipping leader unless force_update=true"
    when: isLeader.stdout == 'true'
